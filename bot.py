import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types.message import ContentType
import pickledb
import config
from os import listdir
from config import isFile
import asyncio
import os
import keyboards as kb

logging.basicConfig(level=logging.INFO)
bot = Bot(token=config.TOKEN)
dp = Dispatcher(bot)

@dp.message_handler(commands=["start"])
async def starting_mail(message: types.Message):
	await message.answer("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è –≤ –ø–æ—á—Ç–æ–≤–æ–º –∫–ª–∏–µ–Ω—Ç–µ *Telegram Mail*\n–ó–¥–µ—Å—å —Ç—ã —Å–º–æ–∂–µ—à—å —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ—é —Ç–µ–ª–µ–≥—Ä–∞–º–º –ø–æ—á—Ç—É –∏ –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è.\n–ß—Ç–æ–±—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ—á—Ç—É, –Ω–∞–ø–∏—à–∏ /register",parse_mode="markdown")

@dp.message_handler(commands=["register"])
async def registration_mail(message: types.Message):
	if isFile("users/"+str(message.from_user.id)+".json"):
		await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ —É –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ø–æ—á—Ç–∞.")
	else:
		await message.answer("–ó–∞–ø—É—â–µ–Ω –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ —Å–µ—Ç–∏ Telegram Mail.\n–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—è—Å—å –≤—ã —Å–æ–≥–ª–∞—à–∞–µ—Ç–µ—Å—å —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏:\n–ü–æ–ª–∏—Ç–∏–∫–∞ –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ - https://clck.ru/aqLCD\n–£—Å–ª–æ–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è - https://clck.ru/arPfM", reply_markup=kb.reg_markup)

@dp.message_handler(commands=["edit","change"])
async def change_user_mail(message: types.Message):
	if isFile("users/"+str(message.from_user.id)+".json"):
		ms, ml = message.get_args().split()
		if "@telegram.org" in ml:
			m = ms.replace("@telegram.org", "")
			current_user = pickledb.load("users/"+str(message.from_user.id)+".json", False)
			current_mail = pickledb.load("mails/"+m+".json", False)
			current_id = current_mail.get("id")
			if current_id == message.from_user.id:
				current_mail.set("mail", ml)
				current_user.set("mail", ml)
				current_user.dump()
				current_mail.dump()
				mk = ml.replace("@telegram.org", "")
				os.rename("mails/"+m+".json","mails/"+mk+".json")
				message.answer("–í–∞—à –Ω–∏–∫-–Ω–µ–π–º —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω—ë–Ω!\n–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —ç—Ç–æ, –≤–≤–µ–¥—è –∫–æ–º–º–∞–Ω–¥—É /info")
			else:
				await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ —ç—Ç–æ –Ω–µ –≤–∞—à–∞ –ø–æ—á—Ç–∞!")
		else:
			await message.answer("–ù–µ–∫–∫–æ—Ä–µ–∫—Ç–Ω—ã–π –≤—Ç–æ—Ä–æ–π –∞—Ä–≥—É–º–µ–Ω—Ç")
	else:
		await message.answer("–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –º–µ–Ω—è—Ç—å –ø–æ—á—Ç—É, –µ—ë –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—åüòâ")

@dp.message_handler(commands=["reset"])
async def remove_user_mail(message: types.Message):
	if config.isFile("users/"+str(message.from_user.id)+".json"):
		rem_mail = message.get_args()
		if "@telegram.org" in rem_mail:
			r_mail = rem_mail.replace("@telegram.org","")
			current_mail = pickledb.load("mails/"+r_mail+".json", False)
			current_id = current_mail.get("id")
			if current_id == message.from_user.id:
				os.remove("mails/"+r_mail+".json")
				os.remove("users/"+str(message.from_user.id)+".json")
				await message.answer("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω—ã!")
			else:
				await message.answer("–≠—Ç–æ –Ω–µ –≤–∞—à–∞ –ø–æ—á—Ç–∞!")
		else:
			await message.answer("–ù–µ–∫–∫–æ—Ä–µ–∫—Ç–Ω–∞—è –ø–æ—á—Ç–∞! –í–≤–µ–¥–∏—Ç–µ –ø–æ—á—Ç—É –ø–æ —Ñ–æ—Ä–º–µ:\n–≤–∞—à–∞ –ø–æ—á—Ç–∞@telegram.org")
	else:
		await message.answer("–£–ø—Å! –ê —É –≤–∞—Å –ø–æ—Ö–æ–∂–µ –Ω–µ—Ç –ø–æ—á—Ç—ã!\n–ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–ø–∏—à–∏—Ç–µ /register")

@dp.message_handler(commands=["info"])
async def user_information(message: types.Message):
	if isFile("users/"+str(message.from_user.id)+".json"):
		usr_db = pickledb.load("users/"+str(message.from_user.id)+".json", False)
		usr_mail = usr_db.get("mail")
		if usr_db.get("full") == 1:
			usr_full = "–ï—Å—Ç—å"
			await message.answer(
				f"–í–æ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—Å:\n*–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:* `{message.from_user.username}`\n*ID:* `{message.from_user.id}`\n*–í–∞—à–∞ –ø–æ—á—Ç–∞:* `{usr_mail}`\n–ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø: *{usr_full}*",
				parse_mode="markdown")
		else:
			usr_full = "–ù–µ—Ç"
			await message.answer(
				f"–í–æ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—Å:\n*–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:* `{message.from_user.username}`\n*ID:* `{message.from_user.id}`\n*–í–∞—à–∞ –ø–æ—á—Ç–∞:* `{usr_mail}`\n–ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø: *{usr_full}*",
				parse_mode="markdown", reply_markup=kb.info_markup)
	else:
		await message.answer("–ü—Ä–æ—Å—Ç–∏—Ç–µ, –Ω–æ –≤—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã!\n–ß—Ç–æ–±—ã —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å - –Ω–∞–ø–∏—à–∏—Ç–µ /register")

@dp.message_handler(commands=["send"])
async def send_mail_from_user(message: types.Message):
	if isFile("users/"+str(message.from_user.id)+".json"):
		try:
			write_to = message.get_args() #recipient mail. Example: user@telegram.org
			if "@telegram.org" in write_to:
				check_db = pickledb.load("users/"+str(message.from_user.id)+".json", False)
				user_full = check_db.get('full')
				await message.delete()
				if user_full == 1:
					await message.answer(f"–ü—Ä–æ–≤–æ–¥–∏—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∫–∞.\n–í–≤–µ–¥—ë–Ω—ã–π –∞–¥—Ä–µ—Å: `{write_to}`\n–£ –≤–∞—Å –µ—Å—Ç—å *–ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø*, –∞ –∑–Ω–∞—á–∏—Ç –∑–∞–¥–µ—Ä–∂–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–∞", parse_mode="markdown")
					config.recipient_mail = write_to.replace("@telegram.org", "")
					await asyncio.sleep(0.1)
				else:
					await message.answer(
						f"–ü—Ä–æ–≤–æ–¥–∏—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∫–∞.\n–í–≤–µ–¥—ë–Ω—ã–π –∞–¥—Ä–µ—Å: `{write_to}`\n*–í–Ω–∏–º–∞–Ω–∏–µ:* –¢–∞–∫ –∫–∞–∫ —É –≤–∞—Å –Ω–µ—Ç –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞, –±—É–¥–µ—Ç –∑–∞–¥–µ—Ä–∂–∫–∞.",
						parse_mode="markdown")
					config.recipient_mail = write_to.replace("@telegram.org", "")
					await asyncio.sleep(1.9)
				if isFile("mails/"+config.recipient_mail+".json"):
					await message.answer("–ü–æ—á—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å –Ω–∞–π–¥–µ–Ω\n–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –µ–º—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å.")
					config.is_mailing = True
				else:
					await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
			else:
				await message.delete()
				await message.answer("–ù–µ–∫–∫–æ—Ä–µ—Ç–Ω—ã–π –∞–¥—Ä–µ—Å!\n–í–≤–µ–¥–∏—Ç–µ –µ—â—ë —Ä–∞–∑.")
				config.is_mailing = False

		except:
			await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!")

	else:
		await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ –≤—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏ –≤–∞—à—É –ø–æ—á—Ç—É.\n–ß—Ç–æ–±—ã —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å - –ø—Ä–æ–ø–∏—à–∏—Ç–µ /register")

@dp.message_handler(commands=["mails"])
async def read_all_mails(message: types.Message):
	usr_base = pickledb.load("users/"+str(message.from_user.id)+".json", False)
	if usr_base.get("full") == 1:
		await message.answer("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –∑–∞–ø—Ä–æ—Å...")
		mails = listdir("mails")
		all_mails = ""
		for i in range(len(mails)):
			all_mails = all_mails + "`" + mails[i] + "@telegram.org`\n"
		all_mails = all_mails.replace(".json", "")
		await message.answer(f"–í–æ—Ç —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—á—Ç:\n{all_mails}", parse_mode="markdown")
	else:
		await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ! –ù–æ –≤—ã –Ω–µ –º–æ–∂–µ—Ç–µ —ç—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å!\n–ß—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫, –ø—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø.\n/full")

@dp.message_handler(commands=["full"])
async def full_sub_invoice(message: types.Message):
	if isFile("users/"+str(message.from_user.id)+".json"):
		usr_db = pickledb.load("users/" + str(message.from_user.id) + ".json", False)
		if usr_db.get("full") == 1:
			await message.answer("–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø!\n–ù–æ–≤–∞—è –ø–æ–∫—É–ø–∫–∞ —É–∂–µ –∏–º–µ—é—â–µ–≥–æ—Å—è —Ç–æ–≤–∞—Ä–∞ - –ª–∏—à–Ω—è—è —Ç—Ä–∞—Ç–∞ –¥–µ–Ω–µ–≥!")
		else:
			await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω —Å–ø–æ—Å–æ–± –¥–ª—è –æ–ø–ª–∞—Ç—ã:", reply_markup=kb.pay_full)
	else:
		await message.answer("–î–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å!\n/register")

@dp.pre_checkout_query_handler()
async def process_precheckout(pre_checkout: types.PreCheckoutQuery):
	await bot.answer_pre_checkout_query(pre_checkout.id, ok=True)

@dp.message_handler(content_types=ContentType.SUCCESSFUL_PAYMENT)
async def successful_payment(message: types.Message):
	if message.successful_payment.invoice_payload == "sub_full":
		user_pay = pickledb.load("users/"+str(message.from_user.id)+".json", False)
		user_pay.set("full", 1)
		user_pay.dump()
		await message.answer("–ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n–¢–µ–ø–µ—Ä—å –≤–∞–º –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –Ω–æ–≤—ã–µ –∫–æ–º–º–∞–Ω–¥—ã, –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –º–æ–∂–µ—Ç–µ –≤ —Å–ø–∏—Å–∫–µ –∫–æ–º–º–∞–Ω–¥ –±–æ—Ç–∞")
		

@dp.message_handler()
async def mail_handler(message: types.Message):
	if config.registration:
		config.registration = False
		if "@" in message.text:
			await message.answer("–ù–µ–∫–∫–æ—Ä–µ–∫—Ç–Ω–∞—è –ø–æ—á—Ç–∞! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥—É—é")
			config.registration = True
		try:
			f = open("mails/"+message.text+".json", "r")
			f.close()
			await message.answer("–ü—Ä–æ—Å—Ç–∏—Ç–µ, –Ω–æ —Ç–∞–∫–∞—è –ø–æ—á—Ç–∞ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞!\n–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –Ω–æ–≤—É—é.")
			config.registration = True
		except:
			user_mail = message.text+"@telegram.org"
			user_file = pickledb.load("mails/"+message.text+".json", False)
			user_file.set("username", message.from_user.username)
			user_file.set("id", message.from_user.id)
			user_file.set("mail", user_mail)
			user_file.dump()
			new_user = pickledb.load("users/"+str(message.from_user.id)+".json", False)
			new_user.set("username", message.from_user.username)
			new_user.set("id", message.from_user.id)
			new_user.set("mail", user_mail)
			new_user.set("full", 0)
			new_user.dump()
			await message.answer("–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏ –ø–æ—á—Ç—É:\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {}\nID: `{}`\n–ü–æ—á—Ç–∞: {}".format(message.from_user.username, message.from_user.id, user_mail),parse_mode="markdown")

	if config.is_mailing:
		config.is_mailing = False
		mail_text = message.text
		usr = pickledb.load("mails/"+config.recipient_mail+".json",False)
		usr_id = usr.get("id")
		m_usr = pickledb.load("users/"+str(message.from_user.id)+".json", False)
		m_usr_ml = m_usr.get("mail")
		m_usr_mail = m_usr_ml.replace("@telegram.org", "")
		usr_mail = config.recipient_mail + "@telegram.org"
		await bot.send_message(usr_id, f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç *{m_usr_mail}*\n–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: `*{m_usr_ml}*`\n–¢–µ–∫—Å—Ç:\n*{mail_text}*", parse_mode="markdown")
		await bot.send_message(config.admin_id, f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç *{m_usr_mail}*\n–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: `*{m_usr_ml} | {message.from_user.id}*`\n–ü–æ–ª—É—á–∞—Ç–µ–ª—å: ` *{usr_mail} | {usr_id}*`\n–¢–µ–∫—Å—Ç:\n*{mail_text}*", parse_mode="markdown")
		await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ.")

#CallBack Handlers
@dp.callback_query_handler(text="reg_success")
async def success_registration_query(query: types.CallbackQuery):
	await bot.edit_message_text("–û—Ç–ª–∏—á–Ω–æ! –í—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–≥–ª–∞—Å–∏–ª–∏—Å—å –∏ –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.\n–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–æ—á—Ç—ã, –æ–Ω–æ –Ω–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–∏–º–≤–æ–ª–æ–≤ –∏ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º.\n–ü—Ä–∏–º–µ—á–∞–Ω–∏: –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ '@telegram.org'", query.from_user.id, query.message.message_id, query.id, parse_mode="markdown")
	config.registration = True

@dp.callback_query_handler(text="info_full")
async def information_buy_full_query(query: types.CallbackQuery):
	await bot.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω —Å–ø–æ—Å–æ–± –¥–ª—è –æ–ø–ª–∞—Ç—ã:", query.from_user.id, query.message.message_id, query.id, reply_markup=kb.pay_full)

@dp.callback_query_handler(text="yookassa")
async def yookassa_payment_full(query: types.CallbackQuery):
	await bot.delete_message(query.from_user.id, query.message.message_id)
	await bot.send_message(query.from_user.id, "–í–æ—Ç –≤–∞—à —Å—á—ë—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã [–Æ–ö–∞—Å—Å–∞]:")
	await bot.send_invoice(chat_id=query.from_user.id, title="–ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø",
						   description="–ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É Telegram Mail", payload="sub_full",
						   provider_token=config.YOUTOKEN, currency="RUB", start_parameter="full_payment",
						   prices=[{"label": "–†–£–ë", "amount": 12000}])

@dp.callback_query_handler(text="sberbank")
async def sberbank_payment_full(query: types.CallbackQuery):
	await bot.delete_message(query.from_user.id, query.message.message_id)
	await bot.send_message(query.from_user.id, "–í–æ—Ç –≤–∞—à —Å—á—ë—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã [–°–±–µ—Ä–ë–∞–Ω–∫]:")
	await bot.send_invoice(chat_id=query.from_user.id, title="–ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø",
						   description="–ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É Telegram Mail", payload="sub_full",
						   provider_token=config.SBERTOKEN, currency="RUB", start_parameter="full_payment",
						   prices=[{"label": "–†–£–ë", "amount": 12000}])


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)